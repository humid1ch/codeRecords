C51 COMPILER V9.60.7.0   MAIN                                                              10/06/2024 10:38:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          /*
   2          C51 的串口通信 与 定时器有关
   3          需要设置定时器, 来实现串口按一定的波特率发送或接收数据
   4          
   5          设置定时器之后, 串口模块会 自动控制 按照波特率发送 或 接收数据
   6          当发送了一帧数据之后, MCU会自动将TI设置为1, 需要手动清零 才能继续发送数据
   7          接收同理, 会将RI自定设置为1, 需要手动清零 才能继续接收数据
   8                 7   6   5   4   3   2   1   0
   9          SCON: SM0 SM1 SM2 REN TB8 RB8 TI  RI
  10          
  11          规定上, C51串口通信是全双工的, 但实际上 发送 和 接收数据 公用同一个缓冲区(S
             -BUF 8位寄存器)
  12          所以, 在实际上 C51串口通信只能是半双工的
  13          
  14          SBUF 8位寄存器, 是串口通信的一个接收和发送缓冲区, 是需要一次性接收8个bit(1字
             -节)的寄存器, 不能按位寻址
  15          */
  16          
  17          #include <reg52.h>
  18          #include "stdio.h"
  19          
  20          #define IS_RECEIVE_N(status) (status & 0x8000)
  21          #define RECEIVED_N(status) (status |= 0x8000)
  22          
  23          #define IS_RECEIVE_R(status) (status & 0x4000)
  24          #define RECEIVED_R(status) (status |= 0x4000)
  25          
  26          unsigned int uartRxStatus = 0;
  27          // 0 ~ 15
  28          // 如果, 接收到'\r', 就将14位 置1
  29          // 如果, 接收到'\n', 就将15位 置1
  30          // 前 0 ~ 13位, 记录接收数据的长度
  31          // 当 14 15 位为 1时, 后面的数据不再接收, 及时进行处理
  32          // 当 14 位为1时, 当前接收的数据必须为'\n', 否则就丢弃并清空已接收数据
  33          
  34          char uartBuffer[51] = {0};
  35          char inIndex = 0;
  36          
  37          char out = 0; // 是否进行输出
  38          
  39          // 规定 发送端 发送数据的结尾为 "\r\n"
  40          void uart1Receive() {
  41   1          unsigned char receiveByte = 0;
  42   1          receiveByte = SBUF;                        // 接收一下
  43   1      
  44   1          if (IS_RECEIVE_N(uartRxStatus) == 0) {     // 没收到 '\n' 再继续接收
  45   2              if (IS_RECEIVE_R(uartRxStatus) == 0) { // 还没收到'\r'
  46   3                  uartBuffer[inIndex++] = receiveByte;
  47   3                  
  48   3              }
  49   2              else {
  50   3                  if (receiveByte == '\n')
  51   3                      RECEIVED_N(uartRxStatus);
  52   3                  else {
C51 COMPILER V9.60.7.0   MAIN                                                              10/06/2024 10:38:22 PAGE 2   

  53   4                  }
  54   3              }
  55   2          }
  56   1      }
  57          
  58          //void uart1Func(void) interrupt 4 {
  59          //    //检测串口1接收中断
  60          //    if (RI) {
  61          
  62          //        uartBuffer[inIndex++] = SBUF;
  63          
  64          //        RI = 0; //清除串口1接收中断请求位
  65          
  66          //        // 判断 数据是否接收完毕
  67          //        out = receiveOver(uartBuffer, inIndex);
  68          //    }
  69          //}
  70          
  71          // uart1 串口1 用的是定时器1
  72          void uart1Init(void) {
  73   1          PCON |= 0x80; //使能波特率倍速位SMOD
  74   1          SCON = 0x50;  //8位数据,可变波特率
  75   1      
  76   1          // 先高4位清零, 在设置计时器模式
  77   1          TMOD &= 0x0F; // 定时器1 高4位清零
  78   1          TMOD |= 0x20; // 定时器1 为定时器模式, 8位 自动重载
  79   1      
  80   1          // 8位 自动重载
  81   1          TL1 = 0xFA; // 设置定时初始值
  82   1          TH1 = 0xFA; // 设置定时重载值
  83   1      
  84   1          ET1 = 0; // 禁止定时器中断, 因为要串口1中断
  85   1          TR1 = 1; // 定时器1开始计时
  86   1      
  87   1          ES = 1; // 使能串口1中断
  88   1          EA = 1;
  89   1      }
  90          
  91          void main() {
  92   1          char i = 0;
  93   1      
  94   1          uart1Init();
  95   1      
  96   1          while (1) {
  97   2              if (out) {
  98   3                  for (i = 0; i <= inIndex; i++) {
  99   4                      SBUF = uartBuffer[i];
 100   4                      while (!TI)
 101   4                          ;
 102   4                      TI = 0;
 103   4      
 104   4                      uartBuffer[i] = 0; // 清除缓冲区内容
 105   4      
 106   4                      if (i == inIndex) {
 107   5                          inIndex = 0; // 清空缓冲区
 108   5                      }
 109   4                  }
 110   3      
 111   3                  out = 0;
 112   3              }
 113   2          }
 114   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              10/06/2024 10:38:22 PAGE 3   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    111    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.60.7.0   INFRARED                                                          10/14/2024 11:15:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE INFRARED
OBJECT MODULE PLACED IN .\Objects\infrared.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Apps\infrared.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Utils;.\Apps) DEBUG OB
                    -JECTEXTEND PRINT(.\Listings\infrared.lst) OBJECT(.\Objects\infrared.obj)

line level    source

   1          #include "reg52.h"
   2          #include "infrared.h"
   3          
   4          sbit IRED = P3 ^ 2; // 红外接收器电信号输出引脚
   5          
   6          u8 gIred_code[4] = {0}; //NEC码（地址码，地址反码，控制码，控制反码）
   7          
   8          void IRD_Init(void) {
   9   1          IT0 = 1; //设置外部中断0为下降沿触发
  10   1          EX0 = 1; // 外部中断0使能
  11   1          EA = 1;  //总中断使能
  12   1      
  13   1          IRED = 1; //红外端口空闲为高电平
  14   1      }
  15          
  16          // 红外解NEC码, 接收器收到红外信号会触发外部中断0
  17          // 中断函数, 不用暴露
  18          void Ired_Int0(void) interrupt 0 {
  19   1          u8 i = 0, j = 0;
  20   1          u16 time_out = 1000;
  21   1      
  22   1          if (IRED == 0) {
  23   2              // 1. 分析引导码
  24   2              // 等待引导信号低电平结束, 若超时 即超过10ms, 则退出
  25   2              // 因为 引导信号的低电平应该是9ms左右, 可以少, 但是不能多太多
  26   2              while (!IRED && time_out) {
  27   3                  time_out--;
  28   3                  delay10Us();
  29   3      
  30   3                  if (time_out == 0)
  31   3                      return; // 10ms超时
  32   3              }
  33   2              // 出循环, 说明 低电平信号持续时间没有超时
  34   2              // 引脚电平已经拉高
  35   2              if (IRED) {
  36   3                  time_out = 500;
  37   3                  // 等待引导信号高电平结束, 若超时 则退出
  38   3                  // 高电平要持续4.5ms左右, 这里等待5ms
  39   3                  while (IRED && time_out) {
  40   4                      time_out--;
  41   4                      delay10Us();
  42   4                      if (time_out == 0)
  43   4                          return; // 5ms超时
  44   4                  }
  45   3              }
  46   2      
  47   2              // 2. 分析32位数据 (8位地址码原反 和 8位控制码原反)
  48   2              // 4个8位码
  49   2              for (i = 0; i < 4; i++) {
  50   3                  gIred_code[i] = 0;
  51   3                  // 地址码 和 控制码都是8位
  52   3                  for (j = 0; j < 8; j++) {
  53   4                      // 0 和 1, 都是先有 0.56ms 的低电平
  54   4                      time_out = 60; // 等待0.6ms低电平结束，若超时则退出
C51 COMPILER V9.60.7.0   INFRARED                                                          10/14/2024 11:15:03 PAGE 2   

  55   4                      while (!IRED && time_out) {
  56   5                          time_out--;
  57   5                          delay10Us();
  58   5                          if (time_out == 0)
  59   5                              return; // 0.6ms超时
  60   5                      }
  61   4                      // 高电平时间不会超过2000us,
  62   4                      time_out = 20; // 等待2ms高电平结束, 若超时则退出
  63   4                      while (IRED) {
  64   5                          time_out--;
  65   5                          delayN10Us(10); // 由于C51速度不够，只能100us
  66   5                          if (time_out == 0)
  67   5                              return; // 2ms超时
  68   5                      }
  69   4      
  70   4                      // 读到是1, 再记录, 读到是0, 可以不做处理
  71   4                      // 数据是 LSB 发送过来的, 所以先收到的是低位
  72   4                      if (time_out < 8) {
  73   5                          // time_out < 8, 就表示收到的是 1
  74   5                          // 因为 如果是0, 高电平的持续时间不会太久, 即等待的过程中的ti
             -me_out不会--到小于8
  75   5                          gIred_code[i] |= 1 << j;
  76   5                      }
  77   4                  }
  78   3              }
  79   2      
  80   2              // 3. 校检数据
  81   2              // 如果 接收到的 控制码的原码 和 反码 不能匹配
  82   2              // 说明 数据错误, 置零, 可以让后续不做处理
  83   2              if (gIred_code[2] != ~gIred_code[3]) {
  84   3                  gIred_code[2] = 0;
  85   3                  gIred_code[3] = 0;
  86   3              }
  87   2          }
  88   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    300    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

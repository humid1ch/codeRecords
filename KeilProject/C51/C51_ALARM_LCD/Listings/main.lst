C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Users\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Utils;.\Apps) DEBUG OBJEC
                    -TEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "reg52.h"
   2          #include "util.h"
   3          #include "ds1302.h"
   4          #include "ds18b20.h"
   5          #include "lcd1602.h"
   6          #include "beep.h"
   7          #include "skey.h"
   8          
   9          extern u8 gDS1302_Time[7];
  10          
  11          // 用于记录确认闹钟设定时的时间
  12          u8 alarmSet = 0;
  13          u8 alarmHour = 0;
  14          u8 alarmMinite = 0;
  15          u8 alarmSecond = 0;
  16          
  17          u8 setHour = 0;   // 用于小时设置, 最大23
  18          u8 setMinite = 0; // 用于分钟设置, 最大59
  19          u8 setSecond = 0; // 用于秒设置, 最大59
  20          u8 setYear = 20;  // 用于年设置, 初始为20, 最大99
  21          u8 setMonth = 0;  // 用于月设置, 最大为12
  22          u8 setDay = 0;    // 用于日设置, 最大为31
  23          u8 setWeek = 0;   // 用于周几设置, 最大为7
  24          
  25          // 是否进行初始时间设置
  26          void Set_Select();
  27          // 初始时间设置
  28          void Time_Set();
  29          // 温度计算
  30          void Temp_Calculate(u16* u16data, float* temperature, u8* negFlag);
  31          // 时间显示
  32          void LCD1602_Time_Display();
  33          // 温度显示
  34          void LCD1602_Temp_Display(float temp, u8 neg);
  35          // 闹钟结束判断
  36          void Alarm_Beep();
  37          // 闹钟设置
  38          void Alarm_Set();
  39          // 闹钟
  40          void Alarm();
  41          
  42          void main() {
  43   1          u16 u16tempData = 0; // 接收 ds18b20 获取的值
  44   1          u8 negFlag = 0;
  45   1          float temperature = 0.0;
  46   1      
  47   1          BEEP_Init();
  48   1          LCD1602_Init();
  49   1          SKEY_Init();
  50   1          Set_Select();
  51   1          LCD1602_Clear();
  52   1          DS1302_Init();
  53   1          DS18B20_Init();
  54   1      
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 2   

  55   1          while (1) {
  56   2              DS1302_GetTime();
  57   2              LCD1602_Time_Display();
  58   2              Alarm_Beep();
  59   2              delayNMs(20);
  60   2      
  61   2              DS18B20_ReadTemperature(&u16tempData);
  62   2              Temp_Calculate(&u16tempData, &temperature, &negFlag);
  63   2              LCD1602_Temp_Display(temperature, negFlag);
  64   2              negFlag = 0;
  65   2      
  66   2              if (SKEY_Scan() == SKEY4_PRESSED)
  67   2                  Alarm();
  68   2          }
  69   1      }
  70          
  71          void stringsClear(char* str, u8 sizes) {
  72   1          u8 i = 0;
  73   1          for (i = 0; i < sizes; i++)
  74   1              str[i] = 0;
  75   1      }
  76          
  77          // 本闹钟思路, 不采用定时器, 而是 与DS1302读取数据做对比
  78          // 采用定时器也可以, 可以将定时的时间均转换为秒, 设定定时器时间
  79          void Alarm_Set() {
  80   1          u8 keyRes = 0;
  81   1          u8 setOK = 0;
  82   1          u8 alarmSecondCnt = 0; // 用于闹钟秒计时, 最大59
  83   1          u8 alarmMiniteCnt = 0; // 用于闹钟分钟计时, 最大59
  84   1          u8 alarmHourCnt = 0;   // 用于闹钟小时计时, 最大23
  85   1          char alarmSetStr[17] = {0};
  86   1          char setTips[17] = "K1:OK K2:+ K3:-";
  87   1          // 秒
  88   1          while (!setOK) {
  89   2              alarmSetStr[0] = 'S';
  90   2              alarmSetStr[1] = 'e';
  91   2              alarmSetStr[2] = 'c';
  92   2              alarmSetStr[3] = 'o';
  93   2              alarmSetStr[4] = 'n';
  94   2              alarmSetStr[5] = 'd';
  95   2              alarmSetStr[6] = ' ';
  96   2              alarmSetStr[7] = alarmSecondCnt / 10 + '0';
  97   2              alarmSetStr[8] = alarmSecondCnt % 10 + '0';
  98   2              LCD1602_FirstLine(alarmSetStr);
  99   2              LCD1602_SecondLine(setTips);
 100   2              keyRes = SKEY_Scan();
 101   2              switch (keyRes) {
 102   3              case SKEY1_PRESSED:
 103   3                  setOK = 1;
 104   3                  break;
 105   3      
 106   3              case SKEY2_PRESSED:
 107   3                  alarmSecondCnt++;
 108   3                  break;
 109   3      
 110   3              case SKEY3_PRESSED:
 111   3                  alarmSecondCnt--;
 112   3                  break;
 113   3              }
 114   2          }
 115   1          stringsClear(alarmSetStr, 17);
 116   1          LCD1602_Clear();
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 3   

 117   1      
 118   1          // 分
 119   1          setOK = 0;
 120   1          while (!setOK) {
 121   2              alarmSetStr[0] = 'M';
 122   2              alarmSetStr[1] = 'i';
 123   2              alarmSetStr[2] = 'n';
 124   2              alarmSetStr[3] = 'i';
 125   2              alarmSetStr[4] = 't';
 126   2              alarmSetStr[5] = 'e';
 127   2              alarmSetStr[6] = ' ';
 128   2              alarmSetStr[7] = alarmMiniteCnt / 10 + '0';
 129   2              alarmSetStr[8] = alarmMiniteCnt % 10 + '0';
 130   2              LCD1602_FirstLine(alarmSetStr);
 131   2              LCD1602_SecondLine(setTips);
 132   2              keyRes = SKEY_Scan();
 133   2              switch (keyRes) {
 134   3              case SKEY1_PRESSED:
 135   3                  setOK = 1;
 136   3                  break;
 137   3      
 138   3              case SKEY2_PRESSED:
 139   3                  if (alarmMiniteCnt < 59)
 140   3                      alarmMiniteCnt++;
 141   3                  break;
 142   3      
 143   3              case SKEY3_PRESSED:
 144   3                  if (alarmMiniteCnt > 0)
 145   3                      alarmMiniteCnt--;
 146   3                  break;
 147   3              }
 148   2          }
 149   1          stringsClear(alarmSetStr, 17);
 150   1          LCD1602_Clear();
 151   1      
 152   1          // 时
 153   1          setOK = 0;
 154   1          while (!setOK) {
 155   2              alarmSetStr[0] = 'H';
 156   2              alarmSetStr[1] = 'o';
 157   2              alarmSetStr[2] = 'u';
 158   2              alarmSetStr[3] = 'r';
 159   2              alarmSetStr[4] = ' ';
 160   2              alarmSetStr[5] = alarmHourCnt / 10 + '0';
 161   2              alarmSetStr[6] = alarmHourCnt % 10 + '0';
 162   2              LCD1602_FirstLine(alarmSetStr);
 163   2              LCD1602_SecondLine(setTips);
 164   2              keyRes = SKEY_Scan();
 165   2              switch (keyRes) {
 166   3              case SKEY1_PRESSED:
 167   3                  setOK = 1;
 168   3                  break;
 169   3      
 170   3              case SKEY2_PRESSED:
 171   3                  if (alarmHourCnt < 99)
 172   3                      alarmHourCnt++;
 173   3                  break;
 174   3      
 175   3              case SKEY3_PRESSED:
 176   3                  if (alarmHourCnt > 0)
 177   3                      alarmHourCnt--;
 178   3                  break;
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 4   

 179   3              }
 180   2          }
 181   1          stringsClear(alarmSetStr, 17);
 182   1          LCD1602_Clear();
 183   1      
 184   1          // 已设置闹钟
 185   1          alarmSet = 1;
 186   1      
 187   1          // 提示闹钟设置完成
 188   1          DS1302_GetTime(); // 获取当前时间
 189   1          alarmHour = (gDS1302_Time[2] >> 4) * 10 + (gDS1302_Time[2] & 0x0F);
 190   1          alarmMinite = (gDS1302_Time[1] >> 4) * 10 + (gDS1302_Time[1] & 0x0F);
 191   1          alarmSecond = (gDS1302_Time[0] >> 4) * 10 + (gDS1302_Time[0] & 0x0F);
 192   1      
 193   1          // 提示设置完成
 194   1          // Alarm: xx:xx:xx
 195   1          alarmSetStr[0] = 'A';
 196   1          alarmSetStr[1] = 'l';
 197   1          alarmSetStr[2] = 'a';
 198   1          alarmSetStr[3] = 'r';
 199   1          alarmSetStr[4] = 'm';
 200   1          alarmSetStr[5] = ':';
 201   1          alarmSetStr[6] = ' ';
 202   1          alarmSetStr[7] = alarmHourCnt / 10 + '0';
 203   1          alarmSetStr[8] = alarmHourCnt % 10 + '0';
 204   1          alarmSetStr[9] = ':';
 205   1          alarmSetStr[10] = alarmMiniteCnt / 10 + '0';
 206   1          alarmSetStr[11] = alarmMiniteCnt % 10 + '0';
 207   1          alarmSetStr[12] = ':';
 208   1          alarmSetStr[13] = alarmSecondCnt / 10 + '0';
 209   1          alarmSetStr[14] = alarmSecondCnt % 10 + '0';
 210   1          // 提示闹钟开始时间
 211   1          // Start:
 212   1          setTips[0] = 'S';
 213   1          setTips[1] = 't';
 214   1          setTips[2] = 'a';
 215   1          setTips[3] = 'r';
 216   1          setTips[4] = 't';
 217   1          setTips[5] = ':';
 218   1          setTips[6] = ' ';
 219   1          setTips[7] = alarmHour / 10 + '0';
 220   1          setTips[8] = alarmHour % 10 + '0';
 221   1          setTips[9] = ':';
 222   1          setTips[10] = alarmMinite / 10 + '0';
 223   1          setTips[11] = alarmMinite % 10 + '0';
 224   1          setTips[12] = ':';
 225   1          setTips[13] = alarmSecond / 10 + '0';
 226   1          setTips[14] = alarmSecond % 10 + '0';
 227   1          LCD1602_FirstLine(alarmSetStr);
 228   1          LCD1602_SecondLine(setTips);
 229   1      
 230   1          // 计算闹钟结束时间
 231   1          alarmHour += alarmHourCnt;
 232   1          alarmMinite += alarmMiniteCnt;
 233   1          alarmSecond += alarmSecondCnt;
 234   1      
 235   1          // 进位 修正闹钟结束时间
 236   1          alarmMinite += alarmSecond / 60;
 237   1          alarmSecond %= 60;
 238   1          alarmHour += alarmMinite / 60;
 239   1          alarmMinite %= 60;
 240   1          alarmHour %= 24;
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 5   

 241   1      
 242   1          // 十进制转BCD, 方便后面与 ds1302获取时间做对比
 243   1          alarmMinite = ((alarmMinite / 10) << 4) + (alarmMinite % 10);
 244   1          alarmHour = ((alarmHour / 10) << 4) + (alarmHour % 10);
 245   1          alarmSecond = ((alarmSecond / 10) << 4) + (alarmSecond % 10);
 246   1      
 247   1          delayNMs(3000);
 248   1          LCD1602_Clear();
 249   1      }
 250          
 251          void Alarm() {
 252   1          char alarmAskStr[] = "Set Alarm?";
 253   1          char confirmStr[] = "K1: Yes  K2: No";
 254   1          LCD1602_Clear();
 255   1          LCD1602_FirstLine(alarmAskStr);
 256   1          LCD1602_SecondLine(confirmStr);
 257   1      
 258   1          while (1) {
 259   2              if (SKEY_Scan() == SKEY1_PRESSED) {
 260   3                  LCD1602_Clear();
 261   3                  Alarm_Set();
 262   3                  break;
 263   3              }
 264   2              else if (SKEY_Scan() == SKEY2_PRESSED) {
 265   3                  LCD1602_Clear();
 266   3                  break;
 267   3              }
 268   2          }
 269   1      }
 270          
 271          // 闹钟判断
 272          void Alarm_Beep() {
 273   1          if (alarmSet && gDS1302_Time[0] == alarmSecond && gDS1302_Time[1] == alarmMinite && gDS1302_Time[2] ==
             - alarmHour) {
 274   2              alarmSet = 0;
 275   2              BEEP_On(2);
 276   2          }
 277   1      }
 278          
 279          void LCD1602_Temp_Display(float temp, u8 neg) {
 280   1          u16 tempInt = (u16)(temp *= 10);
 281   1          u8 mod = 0;
 282   1          // -xx.xC
 283   1          // 124
 284   1          char tempCode[7] = {0};
 285   1          u8 i = 0;
 286   1      
 287   1          char cnt = 2;
 288   1          while (tempInt) {
 289   2              mod = tempInt % 10;
 290   2              tempInt /= 10;
 291   2              tempCode[cnt--] = mod + '0';
 292   2          }
 293   1          // xxx000 -> 0xx0x0
 294   1          tempCode[4] = tempCode[2];
 295   1          tempCode[2] = tempCode[1];
 296   1          tempCode[1] = tempCode[0];
 297   1          // 0xx0x0 加上符号
 298   1          if (neg)
 299   1              tempCode[0] = '-';
 300   1          else
 301   1              tempCode[0] = ' ';
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 6   

 302   1      
 303   1          tempCode[3] = '.';
 304   1          tempCode[5] = 'C';
 305   1      
 306   1          // 第二行的最后六位
 307   1          for (i = 0; i < 6; i++)
 308   1              LCD1602_Dispaly(0x4A + i, tempCode[i]);
 309   1      }
 310          
 311          void Set_Select() {
 312   1          char setAskStr[] = "Set Default Time";
 313   1          char confirmStr[] = "K1: Yes  K2: No";
 314   1          LCD1602_FirstLine(setAskStr);
 315   1          LCD1602_SecondLine(confirmStr);
 316   1      
 317   1          while (1) {
 318   2              if (SKEY_Scan() == SKEY1_PRESSED) {
 319   3                  LCD1602_Clear();
 320   3                  Time_Set();
 321   3                  break;
 322   3              }
 323   2              else if (SKEY_Scan() == SKEY2_PRESSED) {
 324   3                  LCD1602_Clear();
 325   3                  break;
 326   3              }
 327   2          }
 328   1      }
 329          
 330          void LCD1602_Time_Display() {
 331   1          u8 strData[13] = {0};
 332   1          u8 strTime[9] = {0};
 333   1          u8 u8data = 0;
 334   1          u8 i = 0;
 335   1      
 336   1          // xx-xx-xx
 337   1          for (i = 0; i < 3; i++) {
 338   2              u8data = (gDS1302_Time[i] >> 4) * 10 + (gDS1302_Time[i] & 0x0F);
 339   2              strTime[(2 - i) * 3] = u8data / 10 + '0';
 340   2              strTime[(2 - i) * 3 + 1] = u8data % 10 + '0';
 341   2          }
 342   1          strTime[2] = ':';
 343   1          strTime[5] = ':';
 344   1          // 0123456789
 345   1          // xx-xx-xx-x
 346   1          // 日
 347   1          u8data = (gDS1302_Time[i] >> 4) * 10 + (gDS1302_Time[i] & 0x0F);
 348   1          strData[8] = u8data / 10 + '0';
 349   1          strData[9] = u8data % 10 + '0';
 350   1          i++;
 351   1          // 月
 352   1          u8data = (gDS1302_Time[i] >> 4) * 10 + (gDS1302_Time[i] & 0x0F);
 353   1          strData[5] = u8data / 10 + '0';
 354   1          strData[6] = u8data % 10 + '0';
 355   1          i++;
 356   1          // 周
 357   1          u8data = (gDS1302_Time[i] >> 4) * 10 + (gDS1302_Time[i] & 0x0F);
 358   1          strData[11] = u8data % 10 + '0';
 359   1          i++;
 360   1          // 年
 361   1          u8data = (gDS1302_Time[i] >> 4) * 10 + (gDS1302_Time[i] & 0x0F);
 362   1          strData[0] = '2';
 363   1          strData[1] = '0';
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 7   

 364   1          strData[2] = u8data / 10 + '0';
 365   1          strData[3] = u8data % 10 + '0';
 366   1          strData[4] = '-';
 367   1          strData[7] = '-';
 368   1          strData[10] = '-';
 369   1      
 370   1          LCD1602_FirstLine(strData);
 371   1          LCD1602_SecondLine(strTime);
 372   1      }
 373          
 374          void Time_Set() {
 375   1          char str[9] = {0};
 376   1          u8 confirmFlag = 0;
 377   1          u8 keyRes = 0;
 378   1          char setTips[17] = "K1:OK K2:+ K3:-";
 379   1          // 年的设置
 380   1          while (!confirmFlag) {
 381   2              str[0] = 'Y';
 382   2              str[1] = 'e';
 383   2              str[2] = 'a';
 384   2              str[3] = 'r';
 385   2              str[4] = ' ';
 386   2      
 387   2              keyRes = SKEY_Scan();
 388   2              switch (keyRes) {
 389   3              case SKEY1_PRESSED:
 390   3                  confirmFlag = 1;
 391   3                  break;
 392   3      
 393   3              case SKEY2_PRESSED:
 394   3                  if (setYear < 99)
 395   3                      setYear++;
 396   3                  break;
 397   3      
 398   3              case SKEY3_PRESSED:
 399   3                  if (setYear > 20)
 400   3                      setYear--;
 401   3                  break;
 402   3      
 403   3              default:
 404   3                  break;
 405   3              }
 406   2      
 407   2              str[5] = setYear / 10 + '0';
 408   2              str[6] = setYear % 10 + '0';
 409   2      
 410   2              LCD1602_FirstLine(str);
 411   2              LCD1602_SecondLine(setTips);
 412   2          }
 413   1          stringsClear(str, 9);
 414   1          LCD1602_Clear();
 415   1      
 416   1          // 月的设置
 417   1          confirmFlag = 0;
 418   1          while (!confirmFlag) {
 419   2              str[0] = 'M';
 420   2              str[1] = 'o';
 421   2              str[2] = 'n';
 422   2              str[3] = 't';
 423   2              str[4] = 'h';
 424   2              str[5] = ' ';
 425   2      
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 8   

 426   2              keyRes = SKEY_Scan();
 427   2              switch (keyRes) {
 428   3              case SKEY1_PRESSED:
 429   3                  confirmFlag = 1;
 430   3                  break;
 431   3      
 432   3              case SKEY2_PRESSED:
 433   3                  if (setMonth < 12)
 434   3                      setMonth++;
 435   3                  break;
 436   3      
 437   3              case SKEY3_PRESSED:
 438   3                  if (setMonth > 0)
 439   3                      setMonth--;
 440   3                  break;
 441   3      
 442   3              default:
 443   3                  break;
 444   3              }
 445   2      
 446   2              str[6] = setMonth / 10 + '0';
 447   2              str[7] = setMonth % 10 + '0';
 448   2      
 449   2              LCD1602_FirstLine(str);
 450   2              LCD1602_SecondLine(setTips);
 451   2          }
 452   1          stringsClear(str, 9);
 453   1          LCD1602_Clear();
 454   1      
 455   1          // 日的设置
 456   1          confirmFlag = 0;
 457   1          while (!confirmFlag) {
 458   2              str[0] = 'D';
 459   2              str[1] = 'a';
 460   2              str[2] = 'y';
 461   2              str[3] = ' ';
 462   2      
 463   2              keyRes = SKEY_Scan();
 464   2              switch (keyRes) {
 465   3              case SKEY1_PRESSED:
 466   3                  confirmFlag = 1;
 467   3                  break;
 468   3      
 469   3              case SKEY2_PRESSED:
 470   3                  if (setDay < 31)
 471   3                      setDay++;
 472   3                  break;
 473   3      
 474   3              case SKEY3_PRESSED:
 475   3                  if (setDay > 0)
 476   3                      setDay--;
 477   3                  break;
 478   3      
 479   3              default:
 480   3                  break;
 481   3              }
 482   2      
 483   2              str[4] = setDay / 10 + '0';
 484   2              str[5] = setDay % 10 + '0';
 485   2      
 486   2              LCD1602_FirstLine(str);
 487   2              LCD1602_SecondLine(setTips);
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 9   

 488   2          }
 489   1          stringsClear(str, 9);
 490   1          LCD1602_Clear();
 491   1      
 492   1          // 周的设置
 493   1          confirmFlag = 0;
 494   1          while (!confirmFlag) {
 495   2              str[0] = 'W';
 496   2              str[1] = 'e';
 497   2              str[2] = 'e';
 498   2              str[3] = 'k';
 499   2              str[4] = ' ';
 500   2      
 501   2              keyRes = SKEY_Scan();
 502   2              switch (keyRes) {
 503   3              case SKEY1_PRESSED:
 504   3                  confirmFlag = 1;
 505   3                  break;
 506   3      
 507   3              case SKEY2_PRESSED:
 508   3                  if (setWeek < 7)
 509   3                      setWeek++;
 510   3                  break;
 511   3      
 512   3              case SKEY3_PRESSED:
 513   3                  if (setWeek > 0)
 514   3                      setWeek--;
 515   3                  break;
 516   3      
 517   3              default:
 518   3                  break;
 519   3              }
 520   2      
 521   2              str[5] = setWeek / 10 + '0';
 522   2              str[6] = setWeek % 10 + '0';
 523   2      
 524   2              LCD1602_FirstLine(str);
 525   2              LCD1602_SecondLine(setTips);
 526   2          }
 527   1          stringsClear(str, 9);
 528   1          LCD1602_Clear();
 529   1      
 530   1          // 小时的设置
 531   1          confirmFlag = 0;
 532   1          while (!confirmFlag) {
 533   2              str[0] = 'H';
 534   2              str[1] = 'o';
 535   2              str[2] = 'u';
 536   2              str[3] = 'r';
 537   2              str[4] = ' ';
 538   2      
 539   2              keyRes = SKEY_Scan();
 540   2              switch (keyRes) {
 541   3              case SKEY1_PRESSED:
 542   3                  confirmFlag = 1;
 543   3                  break;
 544   3      
 545   3              case SKEY2_PRESSED:
 546   3                  if (setHour < 23)
 547   3                      setHour++;
 548   3                  break;
 549   3      
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 10  

 550   3              case SKEY3_PRESSED:
 551   3                  if (setHour > 0)
 552   3                      setHour--;
 553   3                  break;
 554   3      
 555   3              default:
 556   3                  break;
 557   3              }
 558   2      
 559   2              str[5] = setHour / 10 + '0';
 560   2              str[6] = setHour % 10 + '0';
 561   2      
 562   2              LCD1602_FirstLine(str);
 563   2              LCD1602_SecondLine(setTips);
 564   2          }
 565   1          stringsClear(str, 9);
 566   1          LCD1602_Clear();
 567   1      
 568   1          // 分钟的设置
 569   1          confirmFlag = 0;
 570   1          while (!confirmFlag) {
 571   2              str[0] = 'M';
 572   2              str[1] = 'i';
 573   2              str[2] = 'n';
 574   2              str[3] = 'i';
 575   2              str[4] = 't';
 576   2              str[5] = 'e';
 577   2              str[6] = ' ';
 578   2      
 579   2              keyRes = SKEY_Scan();
 580   2              switch (keyRes) {
 581   3              case SKEY1_PRESSED:
 582   3                  confirmFlag = 1;
 583   3                  break;
 584   3      
 585   3              case SKEY2_PRESSED:
 586   3                  if (setMinite < 59)
 587   3                      setMinite++;
 588   3                  break;
 589   3      
 590   3              case SKEY3_PRESSED:
 591   3                  if (setMinite > 0)
 592   3                      setMinite--;
 593   3                  break;
 594   3      
 595   3              default:
 596   3                  break;
 597   3              }
 598   2      
 599   2              str[7] = setMinite / 10 + '0';
 600   2              str[8] = setMinite % 10 + '0';
 601   2      
 602   2              LCD1602_FirstLine(str);
 603   2              LCD1602_SecondLine(setTips);
 604   2          }
 605   1          stringsClear(str, 9);
 606   1          LCD1602_Clear();
 607   1      
 608   1          // 秒的设置
 609   1          confirmFlag = 0;
 610   1          while (!confirmFlag) {
 611   2              str[0] = 'S';
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 11  

 612   2              str[1] = 'e';
 613   2              str[2] = 'c';
 614   2              str[3] = 'o';
 615   2              str[4] = 'n';
 616   2              str[5] = 'd';
 617   2              str[6] = ' ';
 618   2      
 619   2              keyRes = SKEY_Scan();
 620   2              switch (keyRes) {
 621   3              case SKEY1_PRESSED:
 622   3                  confirmFlag = 1;
 623   3                  break;
 624   3      
 625   3              case SKEY2_PRESSED:
 626   3                  if (setSecond < 59)
 627   3                      setSecond++;
 628   3                  break;
 629   3      
 630   3              case SKEY3_PRESSED:
 631   3                  if (setSecond > 0)
 632   3                      setSecond--;
 633   3                  break;
 634   3      
 635   3              default:
 636   3                  break;
 637   3              }
 638   2      
 639   2              str[7] = setSecond / 10 + '0';
 640   2              str[8] = setSecond % 10 + '0';
 641   2      
 642   2              LCD1602_FirstLine(str);
 643   2              LCD1602_SecondLine(setTips);
 644   2          }
 645   1          stringsClear(str, 9);
 646   1          LCD1602_Clear();
 647   1      
 648   1          // ds1302赋初值
 649   1          gDS1302_Time[0] = ((setSecond / 10) << 4) + (setSecond % 10); // 秒
 650   1          gDS1302_Time[1] = ((setMinite / 10) << 4) + (setMinite % 10); // 分
 651   1          gDS1302_Time[2] = ((setHour / 10) << 4) + (setHour % 10);     // 时
 652   1          gDS1302_Time[3] = ((setDay / 10) << 4) + (setDay % 10);       // 日
 653   1          gDS1302_Time[4] = ((setMonth / 10) << 4) + (setMonth % 10);   // 月
 654   1          gDS1302_Time[5] = ((setWeek / 10) << 4) + (setWeek % 10);     // 周
 655   1          gDS1302_Time[6] = ((setYear / 10) << 4) + (setYear % 10);     // 年
 656   1      }
 657          
 658          void Temp_Calculate(u16* u16data, float* temperature, u8* negFlag) {
 659   1          // 温度负数修正
 660   1          if ((*u16data) & 0xF800) {
 661   2              *u16data = (~(*u16data)) + 1;
 662   2              *negFlag = 1;
 663   2          }
 664   1      
 665   1          *temperature = (*u16data) * 0.0625;
 666   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2684    ----
   CONSTANT SIZE    =    149    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 17:29:21 PAGE 12  

   DATA SIZE        =     11     184
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

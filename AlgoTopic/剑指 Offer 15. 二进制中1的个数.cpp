/*
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。
提示：
    请注意，在某些语言（如 Java）中，没有无符号整数类型。
    在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。

    在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

示例 1：
输入：n = 11 (控制台输入 00000000000000000000000000001011)
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

示例 2：
输入：n = 128 (控制台输入 00000000000000000000000010000000)
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

示例 3：
输入：n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

/*
解题思路：
    最笨思路：
    二进制中 1 的个数，首先要想到位运算操作符中，& 是同1为1
    则可将数的二进制位逐位 与 1 &操作，flag 记录结果
    flag 为 1 进行计数 即可

    第二笨思路：
    还是将数的二进制位，与 1 比较，但是不改变原数据
    将原数据与 只某一位为 1 的数 &操作
    即  与 1    2    4    8    16,即 1      10      100     1000    10000 
    而 此时flag的结果就不只有 1 和 0了, 因为不是只与 1 &操作的
    所以 flag 不为零时 计数

    优化版思路：
    当一个数 -1 时，会将这个数的二进制位的 从左向右 最后一个 1 变为 0,并将其更低位的所有位变为 1
    例如：10101001 10000000(43392);  43392 - 1 = 10101001 01111111
    即表示 43392 & (43392 - 1) = 10101001 00000000
    直接将 43392二进制位的末位1 消除了, 即表示 n &= (n-1), 可以从n的二进制位低位开始 消除 1
    可设计 n 二进制位中 有几个1, n &= (n-1) 就执行几次, 直到 n 为 0
    执行的次数 即为 n二进制位中 1的个数

    不用再从头到尾遍历位数
*/

class Solution {
public:
    /* 最笨思路
    int hammingWeight(uint32_t n)
    {
        int count = 0;
        while(n)
        {
            size_t flag = n & 1;
            if(flag == 1)
                count++;
            n >>= 1;
        }
        return count;
    }*/ 
    /* 第二笨思路：
    int hammingWeight(uint32_t n)
    {
        int count = 0;

        for(int i = 0; i < 32; i++)
        {
            size_t flag = n & (1 << i);
            if(flag)
                count++;
        }
        return count;
    }*/ 
    // 优化版
    int hammingWeight(uint32_t n)
    {
        int count = 0;
        while(n)
        {
            n &= (n-1);
            count++;
        }

        return count;
    }
};